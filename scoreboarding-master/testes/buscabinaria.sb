/*
UF
add: 5
mul : 8
inteiro :5
INST
add : 2
addi:1
sub:1
subi:2 
mul: 10
div:4
and:3
or:2
not:3
blt:2
bgt:4
beq:5
bne:6
j:4
lw:2
sw:2
*/
.data
#valor a ser buscado:
0
#tamanho do array:
5
#array:
-9 0 10 12 15
.text
#r1 armazena o valor a ser buscado, r2 armazena o indice inferior e r3 armazena o indice superior do vetor
lw r1, 0(r0)	
lw r3, 4(r0)	
subi r3, r3, 1	
addi r4, r0, 2	
#r7 armazena o indice do meio
add r7, r2, r3	
div r7, r7, r4	
#este trecho permite calcular o endereço na memoria do indice do meio, e assim conseguir buscar o valor do meio
subi r8, r7, 1	
addi r9, r0, 4	
mul r8, r8, r9	
addi r8, r8, 12
lw r10, 0(r8)
#o indice do meio precisa ser comparado com r2 para que na ultima iteração consiga finalizar e sair do loop
beq r7, r2, 24
beq r10, r1, 44
bgt r10, r1, 8
#se o valor do meio for menor
add r2, r7, r0
j 416
#se o valor do meio for maior
add r3, r7, r0
j 416
subi r8, r7, 1
mul r8, r8, r9
addi r8, r8, 12
lw r10, 0(r8)
beq r10, r1, 4
addi r7, r7, 1
subi r8, r7, 1
mul r8, r8, r9
addi r8, r8, 12
lw r10, 0(r8)
bne r10, r1, 12
#achou
add r30, r1, r0
add r31, r7, r0
j 532
#não achou
subi r31, r0, 1	
exit